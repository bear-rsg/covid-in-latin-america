# Generated by Django 4.2.7 on 2023-11-10 16:02

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import embed_video.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('biography', models.TextField(blank=True, null=True)),
                ('social_media_profiles', models.TextField(blank=True, help_text='List the URL for each social media profile for this Author on a new line in the text box', null=True)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
                ('latitude', models.CharField(max_length=100)),
                ('longitude', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'countries',
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
            },
        ),
        migrations.CreateModel(
            name='LiteraryGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
            },
        ),
        migrations.CreateModel(
            name='LiteraryResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
            },
        ),
        migrations.CreateModel(
            name='SocialMediaPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
                ('url', models.URLField(blank=True, null=True)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
            },
        ),
        migrations.CreateModel(
            name='SocialMediaPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=1000, null=True)),
                ('content_text', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('content_video', embed_video.fields.EmbedVideoField(blank=True, help_text='Provide a URL of a video hosted on YouTube/Vimeo, e.g. https://www.youtube.com/watch?v=BHACKCNDMW8', null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('date_of_post', models.DateTimeField(blank=True, null=True)),
                ('time_of_post', models.TimeField(blank=True, null=True)),
                ('date_time_other', models.CharField(blank=True, help_text='Add free text data about date/time if not suitable in above fields', max_length=1000, null=True, verbose_name='date and time of post (other)')),
                ('notes_public', models.TextField(blank=True, help_text='These notes will be visible to all users on the public website', null=True, verbose_name='notes (public)')),
                ('notes_admin', models.TextField(blank=True, help_text="These notes are only visible here to admins and won't be shared on the public website", null=True, verbose_name='notes (admin)')),
                ('published', models.BooleanField(default=False, help_text='Tick to make available on public website to all users')),
                ('authors', models.ManyToManyField(blank=True, related_name='socialmediaposts', to='researchdata.author', verbose_name='author(s)')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='socialmediaposts', to='researchdata.country')),
                ('literary_genres', models.ManyToManyField(blank=True, related_name='socialmediaposts', to='researchdata.literarygenre', verbose_name='literary genre(s)')),
                ('literary_response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='socialmediaposts', to='researchdata.literaryresponse')),
                ('social_media_platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='socialmediaposts', to='researchdata.socialmediaplatform')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SocialMediaPostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='')),
                ('social_media_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='socialmediapostimages', to='researchdata.socialmediapost')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='author',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authors', to='researchdata.country'),
        ),
    ]
